# project: cj70whc7z00qu0177u9d86wyf
# version: 37

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type Foresight implements Node {
  action: String!
  createdAt: DateTime!
  id: ID! @isUnique
  order: Int
  retro: Retro @relation(name: "RetroActionItems")
  status: STATUS
  updatedAt: DateTime!
  user: User @relation(name: "ForesightOnUser")
}

type Hindsight implements Node {
  createdAt: DateTime!
  feedback: String!
  id: ID! @isUnique
  member: Member @relation(name: "MemberHindsights")
  notes: String!
  retro: Retro @relation(name: "RetroHindsights")
  supports: [Support!]! @relation(name: "HindsightSupports")
  tags: [Tag!]! @relation(name: "HindsightTags")
  type: Int!
  updatedAt: DateTime!
}

type Member implements Node {
  createdAt: DateTime!
  email: String!
  hindsights: [Hindsight!]! @relation(name: "MemberHindsights")
  id: ID! @isUnique
  name: String!
  role: String!
  supports: [Support!]! @relation(name: "MemberSupports")
  updatedAt: DateTime!
  user: User @relation(name: "UserMembers")
}

type Retro implements Node {
  actionItems: [Foresight!]! @relation(name: "RetroActionItems")
  createdAt: DateTime!
  hindsights: [Hindsight!]! @relation(name: "RetroHindsights")
  id: ID! @isUnique
  name: String!
  updatedAt: DateTime!
  user: User @relation(name: "UserRetros")
}

enum STATUS {
  ACTIVE
  COMPLETE
  INCOMPLETE
}

type Support implements Node {
  createdAt: DateTime!
  hindsight: Hindsight @relation(name: "HindsightSupports")
  id: ID! @isUnique
  member: Member @relation(name: "MemberSupports")
  updatedAt: DateTime!
}

type Tag implements Node {
  createdAt: DateTime!
  hindsight: Hindsight @relation(name: "HindsightTags")
  id: ID! @isUnique
  name: String!
  updatedAt: DateTime!
}

type User implements Node {
  createdAt: DateTime!
  email: String @isUnique
  foresights: [Foresight!]! @relation(name: "ForesightOnUser")
  id: ID! @isUnique
  members: [Member!]! @relation(name: "UserMembers")
  name: String!
  password: String
  retros: [Retro!]! @relation(name: "UserRetros")
  updatedAt: DateTime!
}